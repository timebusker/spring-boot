<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>cn.timebusker</groupId>
    <artifactId>spring-boot</artifactId>
    <version>2.0.0</version>
    <packaging>pom</packaging>
    <name>spring-boot</name>
    <description>spring-boot学习使用总结</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.2.RELEASE</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>utf-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>utf-8</project.reporting.outputEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <maven.build.timestamp.format>yyyyMMddHHmmss</maven.build.timestamp.format>
    </properties>

    <!-- 全局依赖设置：引入依赖会自动传递到子模块中 -->
    <dependencies>
    </dependencies>

    <!-- 全局依赖管理：引入依赖不会自动传递到子模块中，子模块中需要申明依赖；重要用于依赖版本管理 -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>1.2.83</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <finalName>${project.name}-${maven.build.timestamp}</finalName>
        <!-- spring-boot-maven-plugin 提供了许多非常便捷的插件，它可以在classpath下收集很多的JAR包， 并能够建立一个独立可运行的JAR包，这让他能够非常方便的运行你的系统服务�?? spring-boot-maven-plugin插件
            搜索public static void main()方法标记为可运行的类。它提供内置的依赖解析器，用于设置版本号匹配Spring引导依赖�?? 你可以覆盖任何你想要的版本，但是它将默认为Boot的所选版本集 -->
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                    <mainClass>com.timebusker.App</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <meminitial>128m</meminitial>
                    <maxmem>512m</maxmem>
                    <fork>true</fork>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <modules>
        <module>spring-boot-1-QuickStart</module>
        <module>spring-boot-2-RESTful</module>
        <module>spring-boot-3-logs</module>
        <module>spring-boot-4-Scheduled</module>
        <module>spring-boot-5-Async</module>
        <module>spring-boot-6-GlobalException</module>
        <module>spring-boot-7-EhCache</module>
        <module>spring-boot-8-AOP</module>
        <module>spring-boot-9-JavaMailSender</module>
        <module>spring-boot-10-SpringData</module>
        <module>spring-boot-11-SpringSecurity</module>
        <module>spring-boot-12-Swagger2</module>
        <module>spring-boot-13-MyBatis</module>
        <module>spring-boot-14-JdbcTemplate</module>
        <module>spring-boot-15-Redis</module>
        <module>spring-boot-16-Transcation</module>
        <module>spring-boot-17-monitor</module>
        <module>spring-boot-18-MQ</module>
        <module>spring-boot-19-Definition-Starter</module>
        <module>spring-boot-20-Freemarker</module>
        <module>spring-boot-21-MultiDataSource</module>
        <module>spring-boot-22-FarstPlus</module>
        <module>spring-boot-23-MongoDB</module>
        <module>spring-boot-13-MyBatis-XML</module>
        <module>spring-boot-24-WebSocket</module>
    </modules>

</project>